{"version":3,"file":"netconf-lib.js.map","sources":["ng://netconf-lib/lib/services/configuration.service.ts","ng://netconf-lib/lib/services/device.service.ts","ng://netconf-lib/lib/services/session.service.ts","ng://netconf-lib/lib/netconf-lib.service.ts","ng://netconf-lib/lib/netconf-lib.component.ts","ng://netconf-lib/lib/components/device-quickswitch.component.ts","ng://netconf-lib/lib/components/device-selection.component.ts","ng://netconf-lib/lib/components/subcomponents/device-selection-item.component.ts","ng://netconf-lib/lib/components/content-box.component.ts","ng://netconf-lib/lib/components/popup.component.ts","ng://netconf-lib/lib/netconf-lib.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {Device} from '../classes/device';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConfigurationService {\r\n\r\n  public editConfig(device: Device, target: string, config: object) {\r\n    return;\r\n  }\r\n\r\n  public commitChanges(device: Device) {\r\n    return;\r\n  }\r\n\r\n}\r\n","import {EventEmitter, Injectable} from '@angular/core';\r\nimport {Device} from '../classes/device';\r\nimport {Observable, of} from 'rxjs';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {GenericServerResponse} from '../classes/GenericServerResponse';\r\nimport {Session} from '../classes/session';\r\n\r\n@Injectable()\r\nexport class DeviceService {\r\n  constructor(public http: HttpClient) {\r\n  }\r\n\r\n  get connectedDevices(): Device[] {\r\n    return this._connectedDevices;\r\n  }\r\n\r\n  set connectedDevices(value: Device[]) {\r\n    this._connectedDevices = value;\r\n    this.connectedDevicesChanged.emit(value);\r\n  }\r\n\r\n  private _connectedDevices: Device[] = [];\r\n\r\n  public connectedDevicesChanged: EventEmitter<Device[]> = new EventEmitter<Device[]>();\r\n\r\n  public getConnectedDevices(): Device[] {\r\n    return this.connectedDevices;\r\n  }\r\n\r\n  public getSavedDevices(): Observable<Device[]> {\r\n    return this.http.get<Device[]>('/netconf/devices');\r\n  }\r\n\r\n\r\n  public saveDevice(hostname: string,\r\n                    port: number,\r\n                    username: string,\r\n                    deviceName = '',\r\n                    password = '',\r\n                    connect = false): Observable<object> {\r\n    const dev: Device = {\r\n      fingerprint: '',\r\n      id: '',\r\n      name: deviceName,\r\n      hostname,\r\n      port,\r\n      username,\r\n      password\r\n    };\r\n\r\n    if (connect) {\r\n      this.connectToDevice(dev).subscribe();\r\n    }\r\n    return this.http.post<object>('/netconf/device', {device: dev});\r\n  }\r\n\r\n  public connectToDevice(device: Device) {\r\n    // this.connectedDevices.push(device);\r\n    const body = {\r\n      'name': device.name,\r\n      'hostname': device.hostname,\r\n      'port': device.port,\r\n      'username': device.username,\r\n      'password': device.password\r\n    };\r\n    return this.http.post('/netconf/connect', body);\r\n  }\r\n\r\n  /**\r\n   * Filter is xpath (?)\r\n   */\r\n  public getCompatibleDevices(filter: any): Device[] {\r\n    return this.connectedDevices;\r\n  }\r\n\r\n  disconnectDevice(device: Device) {\r\n    return of(null);\r\n  }\r\n\r\n}\r\n","import {EventEmitter, Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {GenericServerResponse} from '../classes/GenericServerResponse';\r\nimport { Session } from '../classes/session';\r\nimport {Device} from '../classes/device';\r\nimport {DeviceService} from './device.service';\r\nimport {Observable} from 'rxjs';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SessionService {\r\n\r\n  constructor(public http: HttpClient, private deviceService: DeviceService) {\r\n  }\r\n\r\n  sessions: Session[] = [];\r\n\r\n  addSession(key: string, device: Device) {\r\n    if (!this.doesSessionExists(key)) {\r\n      this.sessions.push({\r\n        key, device\r\n      });\r\n    } else {\r\n      const idx = this.findSessionIndex(key);\r\n      this.sessions[idx].device = device;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  destroySession(key: string) {\r\n    const idx = this.findSessionIndex(key);\r\n    this.deviceService.disconnectDevice(this.sessions[idx].device).subscribe(\r\n      _ => {\r\n        this.sessions.splice(idx, 1);\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  /**\r\n   *  Check if session exists.\r\n   */\r\n  sessionAlive(key: string): Observable<GenericServerResponse> {\r\n    /*const params = new HttpParams()\r\n      .append('key', key);*/\r\n    return this.http.get<GenericServerResponse>('/netconf/session/alive/' + key);\r\n  }\r\n\r\n\r\n  doesSessionExists(key: string): Boolean {\r\n    for (const session of this.sessions) {\r\n      if (session.key === key) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  findSessionIndex(key: string): number {\r\n    return this.sessions.findIndex(s => s.key === key);\r\n  }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {Device} from './classes/device';\nimport {Session} from './classes/session';\n\nexport * from './services/configuration.service';\nexport * from './services/device.service';\nexport * from './services/session.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NetconfLibService {\n\n  constructor() {\n  }\n\n  public provideExample(): string {\n    return 'Example service works!';\n  }\n\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-nc',\n  template: `\n    <p>\n      netconf-lib works!\n    </p>\n  `,\n  styles: []\n})\nexport class NetconfLibComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport {DeviceService} from '../services/device.service';\r\nimport {Device} from '../classes/device';\r\n\r\n@Component({\r\n  selector: 'lib-device-quickswitch',\r\n  template: `\r\n    <p>\r\n      tbd\r\n    </p>\r\n  `,\r\n  styles: []\r\n})\r\nexport class DeviceQuickswitchComponent implements OnInit {\r\n\r\n  @Input() schemaFilter = '';\r\n  @Input() vertical = false;\r\n  compatibleDevices: Device[] = [];\r\n\r\n  constructor(private deviceService: DeviceService) { }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n}\r\n","import {Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\r\nimport {Device} from '../classes/device';\r\nimport {DeviceService} from '../netconf-lib.service';\r\n\r\n@Component({\r\n  selector: 'lib-device-selection',\r\n  templateUrl: './device-selection.component.html',\r\n  styleUrls: ['./device-selection.component.scss']\r\n})\r\nexport class DeviceSelectionComponent implements OnInit {\r\n\r\n  @Input() schemaFilter = '';\r\n  @Output() devicesSelected: EventEmitter<Device[]> = new EventEmitter<Device[]>();\r\n  compatibleDevices: {device: Device, selected: boolean}[] = [];\r\n\r\n  errorMessage = '';\r\n\r\n  constructor(private deviceService: DeviceService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    const devices = this.deviceService.getCompatibleDevices(this.schemaFilter);\r\n    for (const d of devices) {\r\n      this.compatibleDevices.push({device: d, selected: true});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true, if there is at least one device selected. Returns false otherwise.\r\n   */\r\n  areDevicesSelected(): boolean {\r\n    for (const d of this.compatibleDevices) {\r\n      if (d.selected) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  setAllSelectionsTo(val: boolean) {\r\n    for (const d of this.compatibleDevices) {\r\n      d.selected = val;\r\n    }\r\n  }\r\n\r\n  submit() {\r\n    if (this.areDevicesSelected()) {\r\n      const selectedDevices: Device[] = [];\r\n      for (const d of this.compatibleDevices) {\r\n        if (d.selected) {\r\n          selectedDevices.push(d.device);\r\n        }\r\n      }\r\n      this.devicesSelected.emit(selectedDevices);\r\n      this.errorMessage = '';\r\n    } else {\r\n      this.errorMessage = 'No devices selected';\r\n    }\r\n  }\r\n\r\n}\r\n","import {Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\r\nimport {Device} from '../../classes/device';\r\n\r\n\r\n@Component({\r\n  selector: 'lib-device-selection-item',\r\n  templateUrl: './device-selection-item.component.html',\r\n  styleUrls: ['../device-selection.component.scss']\r\n})\r\nexport class DeviceSelectionItemComponent implements OnInit {\r\n\r\n  @Input() device: Device;\r\n  @Input() selected: boolean;\r\n  @Output() selectedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  compatibleDevices: Device[] = [];\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  changeSelection() {\r\n    this.selectedChange.emit(!this.selected);\r\n  }\r\n\r\n}\r\n","import {Component, OnInit, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-content-box',\r\n  template: `\r\n    <div class=\"content-box\">\r\n      <div class=\"box-header\" *ngIf=\"title\">{{title}}</div>\r\n      <div class=\"box-content\" [class.box-content-limited]=\"limitWidth\">\r\n          <ng-content></ng-content>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./content-box.component.scss']\r\n})\r\nexport class ContentBoxComponent implements OnInit {\r\n\r\n  @Input() title = '';\r\n  @Input() limitWidth = false;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n}\r\n","import {Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-nc-popup',\r\n  template: `\r\n    <div class=\"popup-wrapper\">\r\n      <div class=\"popup-content\">\r\n        <div *ngIf=\"title !== ''\" class=\"popup-header\">{{title}}</div>\r\n        <ng-content></ng-content>\r\n        <div class=\"popup-toolbox\" *ngIf=\"toolbox\">\r\n          <button class=\"btn btn-danger\" (click)=\"cancel()\">Cancel</button>\r\n          <button class=\"btn btn-primary float-right\" (click)=\"submit()\">{{submitBtnText}}</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./popup.component.scss']\r\n})\r\nexport class PopupComponent implements OnInit {\r\n\r\n  @Input() title = '';\r\n  @Input() toolbox = true;\r\n  @Input() submitBtnText = 'Submit';\r\n\r\n  @Output() canceled: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @Output() submitted: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  cancel() {\r\n    this.canceled.emit(true);\r\n  }\r\n\r\n  submit() {\r\n    this.submitted.emit(true);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { NetconfLibComponent } from './netconf-lib.component';\nimport {DeviceQuickswitchComponent} from './components/device-quickswitch.component';\nimport {DeviceSelectionComponent} from './components/device-selection.component';\nimport {DeviceSelectionItemComponent} from './components/subcomponents/device-selection-item.component';\nimport {ContentBoxComponent} from './components/content-box.component';\nimport {PopupComponent} from './components/popup.component';\nimport {HttpClientModule} from '@angular/common/http';\nimport {DeviceService} from './services/device.service';\n\n\nconst sharedComponents = [\n  NetconfLibComponent,\n  DeviceQuickswitchComponent,\n  DeviceSelectionComponent,\n  DeviceSelectionItemComponent,\n  ContentBoxComponent,\n  PopupComponent\n];\n\n@NgModule({\n  imports: [CommonModule, RouterModule, HttpClientModule],\n  declarations: [ ...sharedComponents ],\n  exports: [ ...sharedComponents ],\n  providers: [\n    DeviceService\n  ]\n})\nexport class NetconfLibModule { }\n"],"names":[],"mappings":"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"}
