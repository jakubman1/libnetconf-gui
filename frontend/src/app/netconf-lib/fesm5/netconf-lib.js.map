{"version":3,"file":"netconf-lib.js.map","sources":["ng://netconf-lib/lib/services/configuration.service.ts","ng://netconf-lib/lib/netconf-lib.service.ts","ng://netconf-lib/lib/netconf-lib.component.ts","ng://netconf-lib/lib/services/device.service.ts","ng://netconf-lib/lib/components/device-quickswitch.component.ts","ng://netconf-lib/lib/services/session.service.ts","ng://netconf-lib/lib/components/device-selection.component.ts","ng://netconf-lib/lib/components/subcomponents/device-selection-item.component.ts","ng://netconf-lib/lib/components/content-box.component.ts","ng://netconf-lib/lib/components/popup.component.ts","ng://netconf-lib/lib/services/schemas.service.ts","ng://netconf-lib/lib/components/schema-list/schema-list.component.ts","ng://netconf-lib/lib/netconf-lib.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {Device} from '../classes/device';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConfigurationService {\r\n\r\n  public editConfig(device: Device, target: string, config: object) {\r\n    return;\r\n  }\r\n\r\n  public commitChanges(device: Device) {\r\n    return;\r\n  }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {Device} from './classes/device';\nimport {Session} from './classes/session';\n\nexport * from './services/configuration.service';\n// export * from './services/device.service';\n// export * from './services/session.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NetconfLibService {\n\n  constructor() {\n  }\n\n  public provideExample(): string {\n    return 'Example service works!';\n  }\n\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-nc',\n  template: `\n    <p>\n      netconf-lib works!\n    </p>\n  `,\n  styles: []\n})\nexport class NetconfLibComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import {EventEmitter, Injectable} from '@angular/core';\r\nimport {Device} from '../classes/device';\r\nimport {Observable, of} from 'rxjs';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {GenericServerResponse} from '../classes/GenericServerResponse';\r\nimport {Session} from '../classes/session';\r\n\r\n@Injectable()\r\nexport class DeviceService {\r\n  constructor(public http: HttpClient) {\r\n  }\r\n\r\n  get connectedDevices(): Device[] {\r\n    return this._connectedDevices;\r\n  }\r\n\r\n  set connectedDevices(value: Device[]) {\r\n    this._connectedDevices = value;\r\n    this.connectedDevicesChanged.emit(value);\r\n  }\r\n\r\n  private _connectedDevices: Device[] = [];\r\n\r\n  public connectedDevicesChanged: EventEmitter<Device[]> = new EventEmitter<Device[]>();\r\n\r\n  public getConnectedDevices(): Device[] {\r\n    return this.connectedDevices;\r\n  }\r\n\r\n  public getSavedDevices(): Observable<Device[]> {\r\n    return this.http.get<Device[]>('/netconf/devices');\r\n  }\r\n\r\n\r\n  public saveDevice(hostname: string,\r\n                    port: number,\r\n                    username: string,\r\n                    deviceName = '',\r\n                    password = '',\r\n                    connect = false): Observable<object> {\r\n    const dev: Device = {\r\n      fingerprint: '',\r\n      id: '',\r\n      name: deviceName,\r\n      hostname,\r\n      port,\r\n      username,\r\n      password\r\n    };\r\n\r\n    if (connect) {\r\n      this.connectToDevice(dev).subscribe(); // TODO: Show 'now connecting' modal window\r\n    }\r\n    return this.http.post<object>('/netconf/device', {device: dev});\r\n  }\r\n\r\n  public connectToDevice(device: Device) {\r\n    const body = {\r\n      'name': device.name,\r\n      'hostname': device.hostname,\r\n      'port': device.port,\r\n      'username': device.username,\r\n      'password': device.password\r\n    };\r\n    return this.http.post('/netconf/connect', body);\r\n  }\r\n\r\n  /**\r\n   * Filter is xpath (?)\r\n   */\r\n  public getCompatibleDevices(filter: any): Device[] {\r\n    return this.connectedDevices;\r\n  }\r\n\r\n\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport {DeviceService} from '../services/device.service';\r\nimport {Device} from '../classes/device';\r\n\r\n@Component({\r\n  selector: 'lib-device-quickswitch',\r\n  template: `\r\n    <p>\r\n      tbd\r\n    </p>\r\n  `,\r\n  styles: []\r\n})\r\nexport class DeviceQuickswitchComponent implements OnInit {\r\n\r\n  @Input() schemaFilter = '';\r\n  @Input() vertical = false;\r\n  compatibleDevices: Device[] = [];\r\n\r\n  constructor(private deviceService: DeviceService) { }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n}\r\n","import {EventEmitter, Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {GenericServerResponse} from '../classes/GenericServerResponse';\r\nimport {Session} from '../classes/session';\r\nimport {Device} from '../classes/device';\r\nimport {Observable} from 'rxjs';\r\nimport {tap} from 'rxjs/operators';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SessionService {\r\n\r\n  get sessions(): Session[] {\r\n    console.log('Getting sessions');\r\n    console.log(this._sessions);\r\n    return this._sessions;\r\n  }\r\n\r\n  set sessions(value: Session[]) {\r\n    console.log('Setting sessions');\r\n    console.log(value);\r\n    this._sessions = value;\r\n    this.sessionsChanged.emit(value);\r\n  }\r\n\r\n  constructor(public http: HttpClient) {\r\n    console.log('CONSTRUCTOR OF SESSION SERVICE CALLED');\r\n  }\r\n\r\n  private _sessions: Session[] = [];\r\n\r\n  public sessionsChanged: EventEmitter<Session[]> = new EventEmitter<Session[]>();\r\n\r\n  addSession(key: string, device: Device) {\r\n    if (!this.doesSessionExists(key)) {\r\n      const sessions = this.sessions;\r\n      sessions.push({\r\n        key, device\r\n      });\r\n      this.sessions = sessions;\r\n    } else {\r\n      const idx = this.findSessionIndex(key);\r\n      this._sessions[idx].device = device;\r\n      this.sessionsChanged.emit(this.sessions);\r\n    }\r\n  }\r\n\r\n\r\n  destroySession(key: string) {\r\n    const idx = this.findSessionIndex(key);\r\n    return this.http.delete('/netconf/session/' + key)\r\n      .pipe(\r\n        tap(\r\n          next => {\r\n            this._sessions.splice(idx, 1);\r\n            this.sessionsChanged.emit(this.sessions);\r\n          }\r\n        )\r\n      );\r\n  }\r\n\r\n  loadOpenSessions(): Observable<Session[]> {\r\n    return this.http.get<Session[]>('/netconf/sessions');\r\n  }\r\n\r\n  destroyAllSessions() {\r\n    return this.http.delete('/netconf/sessions');\r\n  }\r\n\r\n  /**\r\n   *  Check if session exists on the server.\r\n   */\r\n  sessionAlive(key: string): Observable<GenericServerResponse> {\r\n    /*const params = new HttpParams()\r\n      .append('key', key);*/\r\n    return this.http.get<GenericServerResponse>('/netconf/session/alive/' + key);\r\n  }\r\n\r\n\r\n  doesSessionExists(key: string): Boolean {\r\n    for (const session of this._sessions) {\r\n      if (session.key === key) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  findSessionIndex(key: string): number {\r\n    return this._sessions.findIndex(s => s.key === key);\r\n  }\r\n\r\n  /**\r\n   * Filter is xpath (?)\r\n   */\r\n  public getCompatibleDeviceSessions(filter: any): Session[] {\r\n    // TODO: Filter\r\n    console.log('Getting compatible sessions');\r\n    console.log(this.sessions);\r\n    return this.sessions;\r\n  }\r\n\r\n}\r\n","import {Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\r\nimport {SessionService} from '../services/session.service';\r\nimport {Session} from '../classes/session';\r\n\r\n@Component({\r\n  selector: 'lib-device-selection',\r\n  templateUrl: './device-selection.component.html',\r\n  styleUrls: ['./device-selection.component.scss'],\r\n})\r\nexport class DeviceSelectionComponent implements OnInit {\r\n\r\n  @Input() schemaFilter = '';\r\n  @Output() devicesSelected: EventEmitter<Session[]> = new EventEmitter<Session[]>();\r\n  compatibleDevices: {session: Session, selected: boolean}[] = [];\r\n\r\n  errorMessage = '';\r\n\r\n  constructor(public sessionService: SessionService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.reload();\r\n  }\r\n\r\n  /**\r\n   * Returns true, if there is at least one device selected. Returns false otherwise.\r\n   */\r\n  areDevicesSelected(): boolean {\r\n    for (const d of this.compatibleDevices) {\r\n      if (d.selected) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  setAllSelectionsTo(val: boolean) {\r\n    for (const d of this.compatibleDevices) {\r\n      d.selected = val;\r\n    }\r\n  }\r\n\r\n  submit() {\r\n    if (this.areDevicesSelected()) {\r\n      const selectedDevices: Session[] = [];\r\n      for (const d of this.compatibleDevices) {\r\n        if (d.selected) {\r\n          selectedDevices.push(d.session);\r\n        }\r\n      }\r\n      this.devicesSelected.emit(selectedDevices);\r\n      this.errorMessage = '';\r\n    } else {\r\n      this.errorMessage = 'No devices selected';\r\n    }\r\n  }\r\n\r\n  reload() {\r\n    // const sessions = this.sessionService.getCompatibleDeviceSessions('');\r\n    const sessions = this.sessionService.sessions;\r\n    this.sessionService.sessionsChanged.subscribe(\r\n      ses => {\r\n        for (const s of ses) {\r\n          this.compatibleDevices.push({session: s, selected: true});\r\n        }\r\n      }\r\n    );\r\n    for (const s of sessions) {\r\n      this.compatibleDevices.push({session: s, selected: true});\r\n    }\r\n  }\r\n\r\n}\r\n","import {Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\r\nimport {Device} from '../../classes/device';\r\n\r\n\r\n@Component({\r\n  selector: 'lib-device-selection-item',\r\n  templateUrl: './device-selection-item.component.html',\r\n  styleUrls: ['../device-selection.component.scss']\r\n})\r\nexport class DeviceSelectionItemComponent implements OnInit {\r\n\r\n  @Input() device: Device;\r\n  @Input() selected: boolean;\r\n  @Output() selectedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  compatibleDevices: Device[] = [];\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  changeSelection() {\r\n    this.selectedChange.emit(!this.selected);\r\n  }\r\n\r\n}\r\n","import {Component, OnInit, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-content-box',\r\n  template: `\r\n    <div class=\"content-box\">\r\n      <div class=\"box-header\" *ngIf=\"title\">{{title}}</div>\r\n      <div class=\"box-content\" [class.box-content-limited]=\"limitWidth\">\r\n          <ng-content></ng-content>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./content-box.component.scss']\r\n})\r\nexport class ContentBoxComponent implements OnInit {\r\n\r\n  @Input() title = '';\r\n  @Input() limitWidth = false;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n}\r\n","import {Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-nc-popup',\r\n  template: `\r\n    <div class=\"popup-wrapper\">\r\n      <div class=\"popup-content\">\r\n        <div *ngIf=\"title !== ''\" class=\"popup-header\">{{title}}</div>\r\n        <ng-content></ng-content>\r\n        <div class=\"popup-toolbox\" *ngIf=\"toolbox\">\r\n          <button class=\"btn btn-danger\" (click)=\"cancel()\">Cancel</button>\r\n          <button class=\"btn btn-primary float-right\" (click)=\"submit()\">{{submitBtnText}}</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./popup.component.scss']\r\n})\r\nexport class PopupComponent implements OnInit {\r\n\r\n  @Input() title = '';\r\n  @Input() toolbox = true;\r\n  @Input() submitBtnText = 'Submit';\r\n\r\n  @Output() canceled: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @Output() submitted: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  cancel() {\r\n    this.canceled.emit(true);\r\n  }\r\n\r\n  submit() {\r\n    this.submitted.emit(true);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {GenericServerResponse} from '../classes/GenericServerResponse';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SchemasService {\n\n  constructor(private http: HttpClient) { }\n\n  static newlineToBr(message: string) {\n    const entityMap = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      // '\"': '&quot;',\n      // '\\'': '&#39;',\n      '/': '&#x2F;'\n    };\n    return message.replace(/[&<>\\/]/g, s => entityMap[s])\n      .replace(/\\n/g, '<br>')\n      .replace(/\\t/g, '&nbsp;');\n  }\n\n  static formatYang(message: string) {\n    const chars = [...message]; // Split message to chars in unicode-safe way\n\n    let bracketPos = 0;\n    let stringFlag = false;\n    let patternFlag = false;\n    let result = '';\n    let idx = 0;\n    for (const c of chars) {\n      switch (c) {\n        case '{':\n          if (!stringFlag && !patternFlag) {\n            bracketPos++;\n            result += c + '<div class=\"level\">';\n          } else {\n            result += c;\n          }\n          break;\n        case '}':\n          if (!stringFlag && !patternFlag) {\n            bracketPos--;\n            result += '</div>' + c;\n          } else {\n            result += c;\n          }\n          break;\n        case '\"':\n          if (stringFlag) {\n            result += c + '</span>';\n          } else {\n            result += '<span class=\"string\">' + c;\n          }\n          stringFlag = !stringFlag;\n          break;\n        case '\\'':\n          if (!stringFlag) {\n            if (patternFlag) {\n              result += c + '</span>';\n            } else {\n              result += '<span class=\"pattern\">' + c;\n            }\n            patternFlag = !patternFlag;\n          } else {\n            result += c;\n          }\n          break;\n        default:\n          result += c;\n          break;\n      }\n      idx++;\n    }\n    return result;\n  }\n\n  getSchemaNames(): Observable<string[]> {\n    return this.http.get<string[]>('/netconf/schemas');\n  }\n\n  getSchema(schemaName: string): Observable<string> {\n    return this.http.get<string>('/netconf/schema/' + schemaName);\n  }\n\n  removeSchema(schemaName: string): Observable<GenericServerResponse> {\n    return this.http.delete<GenericServerResponse>('/netconf/schema/' + schemaName);\n  }\n\n\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {SchemasService} from '../../services/schemas.service';\n\n@Component({\n  selector: 'lib-schema-list',\n  templateUrl: './schema-list.component.html',\n  styleUrls: ['./schema-list.component.scss']\n})\nexport class SchemaListComponent implements OnInit {\n\n  constructor(public schemasService: SchemasService) { }\n\n  @Input() selected = '';\n\n  loading = false;\n  error = '';\n  schemas: string[] = [];\n\n  ngOnInit() {\n    this.loading = true;\n    this.schemasService.getSchemaNames().subscribe(\n    names => {\n      this.schemas = names;\n      this.loading = false;\n    },\n    err => {\n        this.error = err.message;\n        this.loading = false;\n      });\n  }\n\n  removeSchema(name: string) {\n    if (confirm('Do you really want to remove ' + name + '?')) {\n      this.loading = true;\n      this.schemasService.removeSchema(name).subscribe(\n        res => {\n          const idx = this.schemas.indexOf(name);\n          this.schemas.splice(idx, 1);\n          if (!res.success) {\n            this.error = res.message;\n          }\n          this.loading = false;\n        },\n        err => {\n          this.error = err.message;\n          this.loading = false;\n        }\n      );\n    }\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { NetconfLibComponent } from './netconf-lib.component';\nimport {DeviceQuickswitchComponent} from './components/device-quickswitch.component';\nimport {DeviceSelectionComponent} from './components/device-selection.component';\nimport {DeviceSelectionItemComponent} from './components/subcomponents/device-selection-item.component';\nimport {ContentBoxComponent} from './components/content-box.component';\nimport {PopupComponent} from './components/popup.component';\nimport {HttpClientModule} from '@angular/common/http';\nimport {DeviceService} from './services/device.service';\nimport {SchemaListComponent} from './components/schema-list/schema-list.component';\n\n\nconst sharedComponents = [\n  NetconfLibComponent,\n  DeviceQuickswitchComponent,\n  DeviceSelectionComponent,\n  DeviceSelectionItemComponent,\n  ContentBoxComponent,\n  PopupComponent,\n  SchemaListComponent\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    HttpClientModule\n  ],\n  declarations: [ ...sharedComponents ],\n  exports: [ ...sharedComponents ],\n  providers: [\n    DeviceService\n  ]\n})\nexport class NetconfLibModule { }\n"],"names":["tslib_1.__values"],"mappings":"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"}
